version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: task-tracker-db-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: task_tracker
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - task-tracker-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER} -d task_tracker']
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: task-tracker-backend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/task_tracker
      JWT_SECRET: ${JWT_SECRET}
      PORT: 3000
    depends_on:
      db:
        condition: service_healthy
    networks:
      - task-tracker-network

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      args:
        VITE_API_URL: ${API_URL}
    container_name: task-tracker-frontend-prod
    restart: unless-stopped
    environment:
      API_URL: ${API_URL}
      APP_NAME: ${APP_NAME}
      NODE_ENV: production
    ports:
      - '80:80'
    depends_on:
      - backend
    networks:
      - task-tracker-network

volumes:
  postgres_data_prod:

networks:
  task-tracker-network:
    driver: bridge
